/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    app_threadx.c
  * @author  MCD Application Team
  * @brief   ThreadX applicative file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "app_threadx.h"

extern UART_HandleTypeDef huart1;
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
TX_THREAD ThreadOne;
TX_THREAD ThreadTwo;
TX_TIMER timer_ptr;
TX_TIMER timer_ptr2;
TX_TIMER timer_ptr3;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void ThreadOne_Entry(ULONG thread_input);
void ThreadTwo_Entry(ULONG thread_input);
void Timer_function_Entry(ULONG thread_input);
void Timer_function_Entry2(ULONG thread_input);
void Timer_function_Entry3(ULONG thread_input);
void App_Delay(uint32_t Delay);

//uint16_t Pin;
/* USER CODE END PFP */

/**
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
  UINT ret = TX_SUCCESS;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;

   /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  CHAR *pointer;
  /* Allocate the stack for ThreadOne.  */
//     if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
//                          APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
//     {
//       ret = TX_POOL_ERROR;
//     }
//
//     /* Create ThreadOne.  */
//     if (tx_thread_create(&ThreadOne, "Thread One", ThreadTwo_Entry, 0,
//                          pointer, APP_STACK_SIZE,
// 						 THREAD_ONE_PRIO , THREAD_ONE_PREEMPTION_THRESHOLD,
//                          100, TX_AUTO_START) != TX_SUCCESS)
//     {
//       ret = TX_THREAD_ERROR;
//     }
//
//
//
//  /* Allocate the stack for ThreadTwo.  */
//    if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
//                         APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
//    {
//      ret = TX_POOL_ERROR;
//    }
//
//    /* Create ThreadTwo.  */
//    if (tx_thread_create(&ThreadTwo, "Thread Two", ThreadTwo_Entry, 0,
//                         pointer, APP_STACK_SIZE,
//                         THREAD_TWO_PRIO, THREAD_TWO_PREEMPTION_THRESHOLD,
//                         100, TX_AUTO_START) != TX_SUCCESS)
//    {
//      ret = TX_THREAD_ERROR;
//    }

  // tx_semaphore_create(&semaphore_ptr,"semaphore_ptr",4);
//   UINT tx_timer_create(&timer_ptr,"timer_ptr",VOID (*expiration_function)(ULONG),ULONG expiration_input,
//		   ULONG initial_ticks,ULONG reschedule_ticks, UINT auto_activate);
    tx_timer_create(&timer_ptr,"timer_ptr",Timer_function_Entry,0x66,1000,500,TX_AUTO_ACTIVATE);
    tx_timer_create(&timer_ptr2,"timer_ptr2",Timer_function_Entry2,0x76,750,750,TX_AUTO_ACTIVATE);
    tx_timer_create(&timer_ptr3,"timer_ptr3",Timer_function_Entry3,0x86,500,1000,TX_AUTO_ACTIVATE);
  /* USER CODE END App_ThreadX_Init */

  return ret;
}

//  /**
//  * @brief  MX_ThreadX_Init
//  * @param  None
//  * @retval None
//  */
//void ThreadOne_Entry(ULONG thread_input)
//{
//	UINT status;
//	uint8_t t1_count=0;
//    char c[]="THIS IS CYIENT OFFICE\n\r";
//  while(1)									/* Infinite loop */
//  {
//
//	  HAL_UART_Transmit(&huart1,"thread1\r\n",11, 100);
//
//  }
//}
//void ThreadTwo_Entry(ULONG thread_input)
//{
//	UINT status;
//	uint8_t t2_count=0;
//	  char s[]="BANGALORE\n\r";
//	  while(1)									/* Infinite loop
//  while(1)									/* Infinite loop */
//  {
//
//		  HAL_UART_Transmit(&huart1,"thread2\r\n",11, 100);
//
//
//
//  }
//}
void Timer_function_Entry(ULONG thread_input)
{
	  HAL_UART_Transmit(&huart1, "WELCOME TO TIMER-1 \n\r",23, 100);
}
void Timer_function_Entry2(ULONG thread_input)
{
	  HAL_UART_Transmit(&huart1, "WELCOME TO TIMER-2 \n\r",23, 100);
}
void Timer_function_Entry3(ULONG thread_input)
{
	  HAL_UART_Transmit(&huart1, "WELCOME TO TIMER-3 \n\r",23, 100);
}
void MX_ThreadX_Init(void)
{
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
void App_Delay(uint32_t Delay)
{
  UINT initial_time = tx_time_get();
  while ((tx_time_get() - initial_time) < Delay);
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
